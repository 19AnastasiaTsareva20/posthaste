import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import '@testing-library/jest-dom';
import { NoteCard } from '../NoteCard';
import { Note } from '../../../types';

const mockNote: Note = {
  id: '1',
  title: '–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞',
  content: '–≠—Ç–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞.',
  tags: ['—Ç–µ—Å—Ç', 'react'],
  folderId: undefined,
  isFavorite: false,
  isArchived: false,
  createdAt: new Date('2024-01-01'),
  updatedAt: new Date('2024-01-02')
};

const mockProps = {
  note: mockNote,
  onEdit: jest.fn(),
  onDelete: jest.fn(),
  onToggleFavorite: jest.fn(),
  onArchive: jest.fn(),
  onClick: jest.fn()
};

describe('NoteCard component', () => {
  beforeEach(() => {
    // Clear all mocks before each test/–û—á–∏—â–∞–µ–º –≤—Å–µ –º–æ–∫–∏ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º
    jest.clearAllMocks();
  });

  test('renders note title and content', () => {
    render(<NoteCard {...mockProps} />);
    
    expect(screen.getByText('–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞')).toBeInTheDocument();
    expect(screen.getByText(/–≠—Ç–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏/)).toBeInTheDocument();
  });

  test('renders tags correctly', () => {
    render(<NoteCard {...mockProps} />);
    
    expect(screen.getByText('#—Ç–µ—Å—Ç')).toBeInTheDocument();
    expect(screen.getByText('#react')).toBeInTheDocument();
  });

  test('calls onEdit when edit button is clicked', () => {
    render(<NoteCard {...mockProps} />);
    
    const editButton = screen.getByText('–ò–∑–º–µ–Ω–∏—Ç—å');
    fireEvent.click(editButton);
    
    expect(mockProps.onEdit).toHaveBeenCalledWith(mockNote);
  });

  test('calls onToggleFavorite when favorite button is clicked', () => {
    render(<NoteCard {...mockProps} />);
    
    // Use aria-label to find favorite button/–ò—Å–ø–æ–ª—å–∑—É–µ–º aria-label –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–Ω–æ–ø–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
    const favoriteButton = screen.getByLabelText('–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ');
    fireEvent.click(favoriteButton);
    
    expect(mockProps.onToggleFavorite).toHaveBeenCalledWith('1');
  });

  test('shows confirmation and calls onDelete when delete button is clicked', () => {
    // Mock window.confirm/–ú–æ–∫–∞–µ–º window.confirm
    window.confirm = jest.fn(() => true);
    
    render(<NoteCard {...mockProps} />);
    
    const deleteButton = screen.getByText('–£–¥–∞–ª–∏—Ç—å');
    fireEvent.click(deleteButton);
    
    expect(window.confirm).toHaveBeenCalledWith('–£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É?');
    expect(mockProps.onDelete).toHaveBeenCalledWith('1');
  });

  test('shows confirmation and calls onArchive when archive button is clicked', () => {
    window.confirm = jest.fn(() => true);
    
    render(<NoteCard {...mockProps} />);
    
    const archiveButton = screen.getByText('üìÅ');
    fireEvent.click(archiveButton);
    
    expect(window.confirm).toHaveBeenCalledWith('–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫—É?');
    expect(mockProps.onArchive).toHaveBeenCalledWith('1');
  });

  test('displays "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è" when title is empty', () => {
    const noteWithoutTitle = { ...mockNote, title: '' };
    render(<NoteCard {...mockProps} note={noteWithoutTitle} />);
    
    expect(screen.getByText('–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')).toBeInTheDocument();
  });

  test('shows favorite star when note is favorite', () => {
    const favoriteNote = { ...mockNote, isFavorite: true };
    render(<NoteCard {...mockProps} note={favoriteNote} />);
    
    // Find favorite button by aria-label and check color/–ù–∞—Ö–æ–¥–∏–º –∫–Ω–æ–ø–∫—É –ø–æ aria-label –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ü–≤–µ—Ç
    const favoriteButton = screen.getByLabelText('–£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ');
    expect(favoriteButton).toHaveClass('text-yellow-500');
  });

  test('calls onClick when card is clicked', () => {
    render(<NoteCard {...mockProps} />);
    
    // Click on the card content area/–ö–ª–∏–∫–∞–µ–º –ø–æ –æ–±–ª–∞—Å—Ç–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–∞—Ä—Ç–æ—á–∫–∏
    const cardContent = screen.getByText('–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞').closest('div');
    fireEvent.click(cardContent as Element);
    
    expect(mockProps.onClick).toHaveBeenCalledWith(mockNote);
  });

  test('does not show archive button when onArchive is not provided', () => {
    const propsWithoutArchive = { ...mockProps };
    delete propsWithoutArchive.onArchive;
    
    render(<NoteCard {...propsWithoutArchive} />);
    
    expect(screen.queryByText('üìÅ')).not.toBeInTheDocument();
  });
});
