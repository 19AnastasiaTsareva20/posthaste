import React, { useState } from "react";
import { Button } from "./Button";
import { Card } from "./Card";

interface WelcomeModalProps {
  isOpen: boolean;
  onClose: () => void;
}

export const WelcomeModal: React.FC<WelcomeModalProps> = ({
  isOpen,
  onClose,
}) => {
  const [currentStep, setCurrentStep] = useState(0);

  // –®–∞–≥–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ç–∞–∂–∞/Tutorial steps
  const steps = [
    {
      title: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ PostHaste! üéâ",
      content: "–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∏ –ø—É–±–ª–∏–∫—É–π—Ç–µ —Å—Ç–∞—Ç—å–∏ –ª–µ–≥–∫–æ –∏ –±—ã—Å—Ç—Ä–æ.",
      buttonText: "–î–∞–ª–µ–µ",
    },
    {
      title: "–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ ‚úçÔ∏è",
      content: "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞—à —Ä–µ–¥–∞–∫—Ç–æ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä–∞—Å–∏–≤—ã—Ö —Å—Ç–∞—Ç–µ–π.",
      buttonText: "–î–∞–ª–µ–µ",
    },
    {
      title: "–ü—É–±–ª–∏–∫–∞—Ü–∏—è üì§",
      content: "–î–µ–ª–∏—Ç–µ—Å—å —Å—Ç–∞—Ç—å—è–º–∏ —Å –¥—Ä—É–∑—å—è–º–∏ –∏–ª–∏ –ø—É–±–ª–∏–∫—É–π—Ç–µ –¥–ª—è –≤—Å–µ—Ö.",
      buttonText: "–î–∞–ª–µ–µ",
    },
    {
      title: "–ù–∞—á–Ω—ë–º! üöÄ",
      content: "–í—Å—ë –≥–æ—Ç–æ–≤–æ! –°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é —Å—Ç–∞—Ç—å—é.",
      buttonText: "–ù–∞—á–∞—Ç—å",
    },
  ];

  if (!isOpen) return null;

  const handleNext = () => {
    if (currentStep < steps.length - 1) {
      setCurrentStep(currentStep + 1);
    } else {
      onClose();
    }
  };

  return (
    <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
      <Card className="max-w-md w-full bg-gradient-accent text-white border-0">
        <div className="text-center">
          <h2 className="text-2xl font-bold mb-4">
            {steps[currentStep].title}
          </h2>
          <p className="text-white/90 mb-6">{steps[currentStep].content}</p>

          {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞/Progress indicator */}
          <div className="flex justify-center gap-2 mb-6">
            {steps.map((_, index) => (
              <div
                key={index}
                className={`w-2 h-2 rounded-full ${
                  index <= currentStep ? "bg-white" : "bg-white/30"
                }`}
              />
            ))}
          </div>

          <div className="flex gap-3 justify-center">
            {currentStep > 0 && (
              <Button
                variant="outline"
                className="border-white text-white hover:bg-white/10"
                onClick={() => setCurrentStep(currentStep - 1)}
              >
                –ù–∞–∑–∞–¥
              </Button>
            )}
            <Button
              className="bg-white text-gray-900 hover:bg-gray-100"
              onClick={handleNext}
            >
              {steps[currentStep].buttonText}
            </Button>
          </div>

          <button
            onClick={onClose}
            className="mt-4 text-white/70 hover:text-white text-sm underline"
          >
            –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ç–∞–∂
          </button>
        </div>
      </Card>
    </div>
  );
};
