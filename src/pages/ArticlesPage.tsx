import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import { Button, Card, SearchBar } from '../components/ui';
import { useToast } from '../components/ui/NotificationSystem';

interface Article {
  id: string;
  title: string;
  content: string;
  isPublic: boolean;
  tags: string[];
  createdAt: string;
  updatedAt: string;
}

export const ArticlesPage: React.FC = () => {
  const toast = useToast();
  const [articles, setArticles] = useState<Article[]>([]);
  const [filteredArticles, setFilteredArticles] = useState<Article[]>([]);
  const [availableTags, setAvailableTags] = useState<string[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
  const savedArticles = JSON.parse(localStorage.getItem('posthaste-articles') || '[]');
  const sortedArticles = savedArticles.sort((a: Article, b: Article) => 
    new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime()
  );
  
  setArticles(sortedArticles);
  setFilteredArticles(sortedArticles);
  
    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–µ–≥–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π
    const allTags = Array.from(
      new Set(sortedArticles.flatMap((article: Article) => article.tags || []))
    ).filter((tag): tag is string => typeof tag === 'string');
    setAvailableTags(allTags);
    
    setLoading(false);
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞/Search function
  const handleSearch = (query: string) => {
    if (!query.trim()) {
      setFilteredArticles(articles);
      return;
    }

    const filtered = articles.filter((article: Article) =>
      article.title.toLowerCase().includes(query.toLowerCase()) ||
      article.content.toLowerCase().includes(query.toLowerCase()) ||
      article.tags.some(tag => tag.toLowerCase().includes(query.toLowerCase()))
    );
    
    setFilteredArticles(filtered);
    toast.info(`–ù–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ç–µ–π: ${filtered.length}`);
  };

  // –§—É–Ω–∫—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ç–µ–≥–∞–º/Tag filter function
  const handleTagFilter = (tag: string) => {
    if (!tag) {
      setFilteredArticles(articles);
      return;
    }

    const filtered = articles.filter((article: Article) =>
      article.tags.includes(tag)
    );
    
    setFilteredArticles(filtered);
    toast.info(`–°—Ç–∞—Ç–µ–π —Å —Ç–µ–≥–æ–º #${tag}: ${filtered.length}`);
  };

  const deleteArticle = (id: string) => {
    if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É —Å—Ç–∞—Ç—å—é?')) {
      const updatedArticles = articles.filter(article => article.id !== id);
      setArticles(updatedArticles);
      setFilteredArticles(updatedArticles.filter(article => 
        filteredArticles.find(fa => fa.id === article.id)
      ));
      localStorage.setItem('posthaste-articles', JSON.stringify(updatedArticles));
      toast.success('–°—Ç–∞—Ç—å—è —É–¥–∞–ª–µ–Ω–∞');
    }
  };

  const exportAllArticles = (format: string) => {
    if (articles.length === 0) {
      toast.warning('–ù–µ—Ç —Å—Ç–∞—Ç–µ–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞');
      return;
    }

    const { exportAllArticles: exportFunction } = require('../utils/exportUtils');
    exportFunction(articles, format);
    toast.success(`–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö —Å—Ç–∞—Ç–µ–π –≤ ${format.toUpperCase()}`);
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-background dark:bg-dark-background flex items-center justify-center">
        <div className="text-center">
          <div className="text-4xl mb-4">‚è≥</div>
          <p className="text-text-secondary">–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–µ–π...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-background dark:bg-dark-background">
      {/* –•—ç–¥–µ—Ä/Header */}
      <header className="bg-gradient-header p-4">
        <div className="flex justify-between items-center max-w-7xl mx-auto">
          <div className="flex items-center gap-6">
            <div>
              <h1 className="text-3xl font-bold text-white">–ú–æ–∏ —Å—Ç–∞—Ç—å–∏</h1>
              <p className="text-white/90 mt-2">
                –í—Å–µ–≥–æ —Å—Ç–∞—Ç–µ–π: {articles.length} ‚Ä¢ –ü–æ–∫–∞–∑–∞–Ω–æ: {filteredArticles.length}
              </p>
            </div>
          </div>
          
          <div className="flex gap-2">
            <Link to="/create">
              <Button className="bg-white text-gray-900 hover:bg-gray-100">
                ‚úçÔ∏è –°–æ–∑–¥–∞—Ç—å —Å—Ç–∞—Ç—å—é
              </Button>
            </Link>
            <Link to="/">
              <Button className="bg-white/20 text-white hover:bg-white/30 border-white/30">
                üè† –ì–ª–∞–≤–Ω–∞—è
              </Button>
            </Link>
          </div>
        </div>
      </header>

      {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç/Main content */}
      <main className="container mx-auto p-6 max-w-7xl">
        <div className="grid lg:grid-cols-4 gap-6">
          {/* –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä—ã/Search and filters */}
          <div className="lg:col-span-1">
            <Card className="mb-6">
              <h3 className="font-semibold text-text-primary dark:text-dark-text-primary mb-4">
                üîç –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä—ã
              </h3>
              <SearchBar
                onSearch={handleSearch}
                onTagFilter={handleTagFilter}
                availableTags={availableTags}
                placeholder="–ü–æ–∏—Å–∫ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É, —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é –∏–ª–∏ —Ç–µ–≥–∞–º..."
              />
            </Card>

            {/* –ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏/Bulk operations */}
            <Card>
              <h3 className="font-semibold text-text-primary dark:text-dark-text-primary mb-4">
                üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö —Å—Ç–∞—Ç–µ–π
              </h3>
              <div className="space-y-2">
                <Button 
                  variant="outline" 
                  size="sm" 
                  className="w-full justify-start"
                  onClick={() => exportAllArticles('json')}
                >
                  üîß JSON
                </Button>
                <Button 
                  variant="outline" 
                  size="sm" 
                  className="w-full justify-start"
                  onClick={() => exportAllArticles('markdown')}
                >
                  üìù Markdown
                </Button>
                <Button 
                  variant="outline" 
                  size="sm" 
                  className="w-full justify-start"
                  onClick={() => exportAllArticles('html')}
                >
                  üåê HTML
                </Button>
              </div>
            </Card>
          </div>

          {/* –°–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–µ–π/Articles list */}
          <div className="lg:col-span-3">
            {filteredArticles.length === 0 ? (
              <Card className="text-center py-12">
                <div className="text-6xl mb-4">üìù</div>
                <h3 className="text-xl font-semibold text-text-primary dark:text-dark-text-primary mb-2">
                  {articles.length === 0 ? '–ù–µ—Ç —Å—Ç–∞—Ç–µ–π' : '–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞'}
                </h3>
                <p className="text-text-secondary dark:text-dark-text-secondary mb-6">
                  {articles.length === 0 
                    ? '–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é —Å—Ç–∞—Ç—å—é!' 
                    : '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞'
                  }
                </p>
                {articles.length === 0 && (
                  <Link to="/create">
                    <Button>–°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é —Å—Ç–∞—Ç—å—é</Button>
                  </Link>
                )}
              </Card>
            ) : (
              <div className="space-y-4">
                {filteredArticles.map((article: Article) => (
                  <Card key={article.id} className="hover:shadow-lg transition-shadow">
                    <div className="flex justify-between items-start">
                      <div className="flex-1">
                        <div className="flex items-center gap-3 mb-3">
                          <h3 className="text-xl font-semibold text-text-primary dark:text-dark-text-primary">
                            {article.title}
                          </h3>
                          <span className={`px-2 py-1 rounded-full text-xs ${
                            article.isPublic 
                              ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200'
                              : 'bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-200'
                          }`}>
                            {article.isPublic ? 'üåç –ü—É–±–ª–∏—á–Ω–∞—è' : 'üîí –ü—Ä–∏–≤–∞—Ç–Ω–∞—è'}
                          </span>
                        </div>
                        
                        <div className="text-text-secondary dark:text-dark-text-secondary text-sm mb-3">
                          <span>–°–æ–∑–¥–∞–Ω–æ: {new Date(article.createdAt).toLocaleDateString()}</span>
                          {article.updatedAt !== article.createdAt && (
                            <span className="ml-3">
                              –û–±–Ω–æ–≤–ª–µ–Ω–æ: {new Date(article.updatedAt).toLocaleDateString()}
                            </span>
                          )}
                        </div>

                        {article.tags.length > 0 && (
                          <div className="flex gap-2 flex-wrap mb-3">
                            {article.tags.map(tag => (
                              <span
                                key={tag}
                                className="px-2 py-1 bg-primary/10 text-primary rounded-full text-xs"
                              >
                                #{tag}
                              </span>
                            ))}
                          </div>
                        )}

                        <div className="flex gap-3">
                          <Link to={`/article/${article.id}`}>
                            <Button variant="outline" size="sm">
                              üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä
                            </Button>
                          </Link>
                          <Link to={`/create?edit=${article.id}`}>
                            <Button variant="outline" size="sm">
                              ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                            </Button>
                          </Link>
                          <Button
                            variant="outline"
                            size="sm"
                            onClick={() => deleteArticle(article.id)}
                            className="text-red-600 hover:text-red-700 hover:border-red-300"
                          >
                            üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                          </Button>
                        </div>
                      </div>
                    </div>
                  </Card>
                ))}
              </div>
            )}
          </div>
        </div>
      </main>
    </div>
  );
};
